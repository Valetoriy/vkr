#![doc = "Peripheral access API for MIK32 microcontrollers (generated using svd2rust v0.36.1 ( ))\n\nYou can find an overview of the generated API [here].\n\nAPI features to be included in the [next] svd2rust release can be generated by cloning the svd2rust [repository], checking out the above commit, and running `cargo doc --open`.\n\n[here]: https://docs.rs/svd2rust/0.36.1/svd2rust/#peripheral-api\n[next]: https://github.com/rust-embedded/svd2rust/blob/master/CHANGELOG.md#unreleased\n[repository]: https://github.com/rust-embedded/svd2rust"]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![no_std]
#![cfg_attr(docsrs, feature(doc_auto_cfg))]
#[allow(unused_imports)]
use generic::*;
#[doc = r"Common register and bit access and modify traits"]
pub mod generic;
#[cfg(feature = "rt")]
extern "C" {}
#[doc(hidden)]
#[repr(C)]
pub union Vector {
    pub _handler: unsafe extern "C" fn(),
    pub _reserved: usize,
}
#[cfg(feature = "rt")]
#[doc(hidden)]
#[no_mangle]
pub static __EXTERNAL_INTERRUPTS: [Vector; 0] = [];
#[doc = "Прямой доступ к памяти"]
pub type Dma = crate::Periph<dma::RegisterBlock, 0x0004_0000>;
impl core::fmt::Debug for Dma {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Dma").finish()
    }
}
#[doc = "Прямой доступ к памяти"]
pub mod dma;
#[doc = "Блок управления питанием и тактированием"]
pub type Pm = crate::Periph<pm::RegisterBlock, 0x0005_0000>;
impl core::fmt::Debug for Pm {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Pm").finish()
    }
}
#[doc = "Блок управления питанием и тактированием"]
pub mod pm;
#[doc = "Программируемый контроллер прерываний"]
pub type Epic = crate::Periph<epic::RegisterBlock, 0x0005_0400>;
impl core::fmt::Debug for Epic {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Epic").finish()
    }
}
#[doc = "Программируемый контроллер прерываний"]
pub mod epic;
#[doc = "Управление монитором напряжения VCC"]
pub type PvdVcc = crate::Periph<pvd_vcc::RegisterBlock, 0x0005_1800>;
impl core::fmt::Debug for PvdVcc {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("PvdVcc").finish()
    }
}
#[doc = "Управление монитором напряжения VCC"]
pub mod pvd_vcc;
#[doc = "Модуль управления функцией ввода/вывода"]
pub type PadConfig = crate::Periph<pad_config::RegisterBlock, 0x0005_0c00>;
impl core::fmt::Debug for PadConfig {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("PadConfig").finish()
    }
}
#[doc = "Модуль управления функцией ввода/вывода"]
pub mod pad_config;
#[doc = "Сторожевой таймер шины"]
pub type WdtBus = crate::Periph<wdt_bus::RegisterBlock, 0x0005_1000>;
impl core::fmt::Debug for WdtBus {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("WdtBus").finish()
    }
}
#[doc = "Сторожевой таймер шины"]
pub mod wdt_bus;
#[doc = "Контроллер блока однократно-программируемой памяти"]
pub type Otp = crate::Periph<otp::RegisterBlock, 0x0005_1400>;
impl core::fmt::Debug for Otp {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Otp").finish()
    }
}
#[doc = "Контроллер блока однократно-программируемой памяти"]
pub mod otp;
#[doc = "Блок WakeUp - управление питанием системным доменом, управление источниками тактовых сигналов"]
pub type WakeUp = crate::Periph<wake_up::RegisterBlock, 0x0006_0000>;
impl core::fmt::Debug for WakeUp {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("WakeUp").finish()
    }
}
#[doc = "Блок WakeUp - управление питанием системным доменом, управление источниками тактовых сигналов"]
pub mod wake_up;
#[doc = "Часы реального времени"]
pub type Rtc = crate::Periph<rtc::RegisterBlock, 0x0006_0400>;
impl core::fmt::Debug for Rtc {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Rtc").finish()
    }
}
#[doc = "Часы реального времени"]
pub mod rtc;
#[doc = "Блок управления режимом загрузки"]
pub type BootManager = crate::Periph<boot_manager::RegisterBlock, 0x0006_0800>;
impl core::fmt::Debug for BootManager {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("BootManager").finish()
    }
}
#[doc = "Блок управления режимом загрузки"]
pub mod boot_manager;
#[doc = "Контроллер SPIFI"]
pub type SpifiConfig = crate::Periph<spifi_config::RegisterBlock, 0x0007_0000>;
impl core::fmt::Debug for SpifiConfig {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SpifiConfig").finish()
    }
}
#[doc = "Контроллер SPIFI"]
pub mod spifi_config;
#[doc = "Контроллер EEPROM (8Кб)"]
pub type EepromRegs = crate::Periph<eeprom_regs::RegisterBlock, 0x0007_0400>;
impl core::fmt::Debug for EepromRegs {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("EepromRegs").finish()
    }
}
#[doc = "Контроллер EEPROM (8Кб)"]
pub mod eeprom_regs;
#[doc = "Криптоблок"]
pub type Crypto = crate::Periph<crypto::RegisterBlock, 0x0008_0000>;
impl core::fmt::Debug for Crypto {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Crypto").finish()
    }
}
#[doc = "Криптоблок"]
pub mod crypto;
#[doc = "Блок вычисления контрольных сумм"]
pub type Crc = crate::Periph<crc::RegisterBlock, 0x0008_0400>;
impl core::fmt::Debug for Crc {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Crc").finish()
    }
}
#[doc = "Блок вычисления контрольных сумм"]
pub mod crc;
#[doc = "Сторожевой таймер"]
pub type Wdt = crate::Periph<wdt::RegisterBlock, 0x0008_1000>;
impl core::fmt::Debug for Wdt {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Wdt").finish()
    }
}
#[doc = "Сторожевой таймер"]
pub mod wdt;
#[doc = "Универсальный синхронный/асинхронный приёмопередатчик (УСАПП)"]
pub type Usart0 = crate::Periph<usart_0::RegisterBlock, 0x0008_1400>;
impl core::fmt::Debug for Usart0 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Usart0").finish()
    }
}
#[doc = "Универсальный синхронный/асинхронный приёмопередатчик (УСАПП)"]
pub mod usart_0;
#[doc = "Универсальный синхронный/асинхронный приёмопередатчик (УСАПП)"]
pub type Usart1 = crate::Periph<usart_1::RegisterBlock, 0x0008_1800>;
impl core::fmt::Debug for Usart1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Usart1").finish()
    }
}
#[doc = "Универсальный синхронный/асинхронный приёмопередатчик (УСАПП)"]
pub mod usart_1;
#[doc = "Регистры модуля TIMER16_0"]
pub type Timer16_0 = crate::Periph<timer16_0::RegisterBlock, 0x0008_1c00>;
impl core::fmt::Debug for Timer16_0 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Timer16_0").finish()
    }
}
#[doc = "Регистры модуля TIMER16_0"]
pub mod timer16_0;
#[doc = "Регистры модуля TIMER16_1"]
pub type Timer16_1 = crate::Periph<timer16_1::RegisterBlock, 0x0008_2000>;
impl core::fmt::Debug for Timer16_1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Timer16_1").finish()
    }
}
#[doc = "Регистры модуля TIMER16_1"]
pub mod timer16_1;
#[doc = "Регистры модуля TIMER16_2"]
pub type Timer16_2 = crate::Periph<timer16_2::RegisterBlock, 0x0008_2400>;
impl core::fmt::Debug for Timer16_2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Timer16_2").finish()
    }
}
#[doc = "Регистры модуля TIMER16_2"]
pub mod timer16_2;
#[doc = "Регистры модуля TIMER32_0"]
pub type Timer32_0 = crate::Periph<timer32_0::RegisterBlock, 0x0005_0800>;
impl core::fmt::Debug for Timer32_0 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Timer32_0").finish()
    }
}
#[doc = "Регистры модуля TIMER32_0"]
pub mod timer32_0;
#[doc = "Регистры модуля TIMER32_1"]
pub type Timer32_1 = crate::Periph<timer32_1::RegisterBlock, 0x0008_2800>;
impl core::fmt::Debug for Timer32_1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Timer32_1").finish()
    }
}
#[doc = "Регистры модуля TIMER32_1"]
pub mod timer32_1;
#[doc = "Регистры модуля TIMER32_2"]
pub type Timer32_2 = crate::Periph<timer32_2::RegisterBlock, 0x0008_2c00>;
impl core::fmt::Debug for Timer32_2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Timer32_2").finish()
    }
}
#[doc = "Регистры модуля TIMER32_2"]
pub mod timer32_2;
#[doc = "Модуль обеспечивает взаимодействие с различными периферийными устройствами"]
pub type Spi0 = crate::Periph<spi_0::RegisterBlock, 0x0008_3000>;
impl core::fmt::Debug for Spi0 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Spi0").finish()
    }
}
#[doc = "Модуль обеспечивает взаимодействие с различными периферийными устройствами"]
pub mod spi_0;
#[doc = "Модуль обеспечивает взаимодействие с различными периферийными устройствами"]
pub type Spi1 = crate::Periph<spi_1::RegisterBlock, 0x0008_3400>;
impl core::fmt::Debug for Spi1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Spi1").finish()
    }
}
#[doc = "Модуль обеспечивает взаимодействие с различными периферийными устройствами"]
pub mod spi_1;
#[doc = "Модуль обеспечивает интерфейс для связи контроллера и последовательной шины I2C"]
pub type I2c0 = crate::Periph<i2c_0::RegisterBlock, 0x0008_3800>;
impl core::fmt::Debug for I2c0 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("I2c0").finish()
    }
}
#[doc = "Модуль обеспечивает интерфейс для связи контроллера и последовательной шины I2C"]
pub mod i2c_0;
#[doc = "Модуль обеспечивает интерфейс для связи контроллера и последовательной шины I2C"]
pub type I2c1 = crate::Periph<i2c_1::RegisterBlock, 0x0008_3c00>;
impl core::fmt::Debug for I2c1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("I2c1").finish()
    }
}
#[doc = "Модуль обеспечивает интерфейс для связи контроллера и последовательной шины I2C"]
pub mod i2c_1;
#[doc = "Модуль ввода/вывода"]
pub type Gpio0 = crate::Periph<gpio_0::RegisterBlock, 0x0008_4000>;
impl core::fmt::Debug for Gpio0 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Gpio0").finish()
    }
}
#[doc = "Модуль ввода/вывода"]
pub mod gpio_0;
#[doc = "Модуль ввода/вывода"]
pub type Gpio1 = crate::Periph<gpio_1::RegisterBlock, 0x0008_4400>;
impl core::fmt::Debug for Gpio1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Gpio1").finish()
    }
}
#[doc = "Модуль ввода/вывода"]
pub mod gpio_1;
#[doc = "Модуль ввода/вывода"]
pub type Gpio2 = crate::Periph<gpio_2::RegisterBlock, 0x0008_4800>;
impl core::fmt::Debug for Gpio2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Gpio2").finish()
    }
}
#[doc = "Модуль ввода/вывода"]
pub mod gpio_2;
#[doc = "Модуль формирования прерываний"]
pub type GpioIrq = crate::Periph<gpio_irq::RegisterBlock, 0x0008_4c00>;
impl core::fmt::Debug for GpioIrq {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GpioIrq").finish()
    }
}
#[doc = "Модуль формирования прерываний"]
pub mod gpio_irq;
#[doc = "Управление ЦАП"]
pub type Dac0 = crate::Periph<dac0::RegisterBlock, 0x0008_5000>;
impl core::fmt::Debug for Dac0 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Dac0").finish()
    }
}
#[doc = "Управление ЦАП"]
pub mod dac0;
#[doc = "Управление ЦАП"]
pub type Dac1 = crate::Periph<dac1::RegisterBlock, 0x0008_5008>;
impl core::fmt::Debug for Dac1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Dac1").finish()
    }
}
#[doc = "Управление ЦАП"]
pub mod dac1;
#[doc = "Управление монитором напряжения AVCC"]
pub type PvdAvcc = crate::Periph<pvd_avcc::RegisterBlock, 0x0008_5010>;
impl core::fmt::Debug for PvdAvcc {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("PvdAvcc").finish()
    }
}
#[doc = "Управление монитором напряжения AVCC"]
pub mod pvd_avcc;
#[doc = "Управление температурным сенсором"]
pub type Tsens = crate::Periph<tsens::RegisterBlock, 0x0008_501c>;
impl core::fmt::Debug for Tsens {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Tsens").finish()
    }
}
#[doc = "Управление температурным сенсором"]
pub mod tsens;
#[doc = "Управление калибруемыми источниками напряжения и тока"]
pub type RefvConfig = crate::Periph<refv_config::RegisterBlock, 0x0008_5038>;
impl core::fmt::Debug for RefvConfig {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("RefvConfig").finish()
    }
}
#[doc = "Управление калибруемыми источниками напряжения и тока"]
pub mod refv_config;
#[doc = "Управление АЦП"]
pub type Adc = crate::Periph<adc::RegisterBlock, 0x0008_503c>;
impl core::fmt::Debug for Adc {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Adc").finish()
    }
}
#[doc = "Управление АЦП"]
pub mod adc;
#[doc = "Регистры 64-разрядного таймера ядра SCR1"]
pub type Scr1Timer = crate::Periph<scr1_timer::RegisterBlock, 0x0049_0000>;
impl core::fmt::Debug for Scr1Timer {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Scr1Timer").finish()
    }
}
#[doc = "Регистры 64-разрядного таймера ядра SCR1"]
pub mod scr1_timer;
#[no_mangle]
static mut DEVICE_PERIPHERALS: bool = false;
#[doc = r" All the peripherals."]
#[allow(non_snake_case)]
pub struct Peripherals {
    #[doc = "DMA"]
    pub dma: Dma,
    #[doc = "PM"]
    pub pm: Pm,
    #[doc = "EPIC"]
    pub epic: Epic,
    #[doc = "PVD_VCC"]
    pub pvd_vcc: PvdVcc,
    #[doc = "PAD_CONFIG"]
    pub pad_config: PadConfig,
    #[doc = "WDT_BUS"]
    pub wdt_bus: WdtBus,
    #[doc = "OTP"]
    pub otp: Otp,
    #[doc = "WakeUp"]
    pub wake_up: WakeUp,
    #[doc = "RTC"]
    pub rtc: Rtc,
    #[doc = "BOOT_MANAGER"]
    pub boot_manager: BootManager,
    #[doc = "SPIFI_CONFIG"]
    pub spifi_config: SpifiConfig,
    #[doc = "EEPROM_REGS"]
    pub eeprom_regs: EepromRegs,
    #[doc = "CRYPTO"]
    pub crypto: Crypto,
    #[doc = "CRC"]
    pub crc: Crc,
    #[doc = "WDT"]
    pub wdt: Wdt,
    #[doc = "USART_0"]
    pub usart_0: Usart0,
    #[doc = "USART_1"]
    pub usart_1: Usart1,
    #[doc = "TIMER16_0"]
    pub timer16_0: Timer16_0,
    #[doc = "TIMER16_1"]
    pub timer16_1: Timer16_1,
    #[doc = "TIMER16_2"]
    pub timer16_2: Timer16_2,
    #[doc = "TIMER32_0"]
    pub timer32_0: Timer32_0,
    #[doc = "TIMER32_1"]
    pub timer32_1: Timer32_1,
    #[doc = "TIMER32_2"]
    pub timer32_2: Timer32_2,
    #[doc = "SPI_0"]
    pub spi_0: Spi0,
    #[doc = "SPI_1"]
    pub spi_1: Spi1,
    #[doc = "I2C_0"]
    pub i2c_0: I2c0,
    #[doc = "I2C_1"]
    pub i2c_1: I2c1,
    #[doc = "GPIO_0"]
    pub gpio_0: Gpio0,
    #[doc = "GPIO_1"]
    pub gpio_1: Gpio1,
    #[doc = "GPIO_2"]
    pub gpio_2: Gpio2,
    #[doc = "GPIO_IRQ"]
    pub gpio_irq: GpioIrq,
    #[doc = "DAC0"]
    pub dac0: Dac0,
    #[doc = "DAC1"]
    pub dac1: Dac1,
    #[doc = "PVD_AVCC"]
    pub pvd_avcc: PvdAvcc,
    #[doc = "TSENS"]
    pub tsens: Tsens,
    #[doc = "REFV_CONFIG"]
    pub refv_config: RefvConfig,
    #[doc = "ADC"]
    pub adc: Adc,
    #[doc = "SCR1_TIMER"]
    pub scr1_timer: Scr1Timer,
}
impl Peripherals {
    #[doc = r" Returns all the peripherals *once*."]
    #[cfg(feature = "critical-section")]
    #[inline]
    pub fn take() -> Option<Self> {
        critical_section::with(|_| {
            if unsafe { DEVICE_PERIPHERALS } {
                return None;
            }
            Some(unsafe { Peripherals::steal() })
        })
    }
    #[doc = r" Unchecked version of `Peripherals::take`."]
    #[doc = r""]
    #[doc = r" # Safety"]
    #[doc = r""]
    #[doc = r" Each of the returned peripherals must be used at most once."]
    #[inline]
    pub unsafe fn steal() -> Self {
        DEVICE_PERIPHERALS = true;
        Peripherals {
            dma: Dma::steal(),
            pm: Pm::steal(),
            epic: Epic::steal(),
            pvd_vcc: PvdVcc::steal(),
            pad_config: PadConfig::steal(),
            wdt_bus: WdtBus::steal(),
            otp: Otp::steal(),
            wake_up: WakeUp::steal(),
            rtc: Rtc::steal(),
            boot_manager: BootManager::steal(),
            spifi_config: SpifiConfig::steal(),
            eeprom_regs: EepromRegs::steal(),
            crypto: Crypto::steal(),
            crc: Crc::steal(),
            wdt: Wdt::steal(),
            usart_0: Usart0::steal(),
            usart_1: Usart1::steal(),
            timer16_0: Timer16_0::steal(),
            timer16_1: Timer16_1::steal(),
            timer16_2: Timer16_2::steal(),
            timer32_0: Timer32_0::steal(),
            timer32_1: Timer32_1::steal(),
            timer32_2: Timer32_2::steal(),
            spi_0: Spi0::steal(),
            spi_1: Spi1::steal(),
            i2c_0: I2c0::steal(),
            i2c_1: I2c1::steal(),
            gpio_0: Gpio0::steal(),
            gpio_1: Gpio1::steal(),
            gpio_2: Gpio2::steal(),
            gpio_irq: GpioIrq::steal(),
            dac0: Dac0::steal(),
            dac1: Dac1::steal(),
            pvd_avcc: PvdAvcc::steal(),
            tsens: Tsens::steal(),
            refv_config: RefvConfig::steal(),
            adc: Adc::steal(),
            scr1_timer: Scr1Timer::steal(),
        }
    }
}
